mapping org.slizza.jqassistant.java.AggregatedFlatPackagesMapping {
	
	name "Aggregated Java Model (flat Packages) - Experimental"
	description "Aggregated Java Model (flat Packages) - Experimental"
	
	//
	structure {

		//
		topLevelNodeQueries {

			// top level 'modules' (jars and/or directories)
			"MATCH (module:Java:Artifact) 
			 WHERE (module:Directory OR module:Jar:Archive) 
			 RETURN id(module)"
		}

		//
		nodeHierarchyQueries {
			
			//  flat directories
			"MATCH (module:Java:Artifact)-[:CONTAINS]->(d:Directory)-[:CONTAINS]->(f:File) 
             WHERE (module:Directory OR module:Jar:Archive)  AND NOT (f:Directory) 
             RETURN DISTINCT id(module), id(d)",
             
			// top level files (no types!)
			"MATCH (d:Directory)-[:CONTAINS]->(f:File) 
             WHERE NOT (f:Type) AND NOT (f:Directory)
			 RETURN id(d), id(f)",
             
            // java types
            "MATCH (d:Directory)-[:CONTAINS]->(t:Type) 
			 RETURN id(d), id(t)",
			 
			// methods/fields
			"MATCH (t:Type)-[:DECLARES]->(e) 
             WHERE ((e:Method) OR (e:Field)) AND NOT e.visibility IS NULL 
             RETURN id(t), id(e)" 
		}
		
		//
		dependencyQueries {
			
			aggregatedDependencyQuery {
				"MATCH (t1:File:Type:Java)-[r:DEPENDS_ON]->(t2:File:Type:Java) 
				 RETURN id(t1),id(t2),id(r),type(r)"
			 		
				onResolve {
				
				"MATCH (n1)-[rel]->(n2) 
					 WHERE  
						id(n1) in {from} AND id(n2) in {to} AND (
					 	(n1:Type)-[rel:EXTENDS|:IMPLEMENTS]->(n2:Type) OR 
						(n1:Method)-[rel:INVOKES]->(n2:Method) OR 
						(n1:Method)-[rel:READS|:WRITES]->(n2:Field) OR 
						(n1:Field)-[rel:OF_TYPE]->(n2:Type) OR 
						(n1:Method)-[rel:THROWS]->(n2:Type) OR 
						(n1:Method)-[rel:RETURNS]->(n2:Type)) 
					RETURN id(n1), id(n2), id(rel), type(rel)"
					
				"MATCH (n1)-[rel:HAS]->(:Parameter)-[:OF_TYPE]->(n2:Type)
					WHERE id(n1) in {from} AND id(n2) in {to}
				 	RETURN id(n1), id(n2), id(rel), 'HAS_PARAMETER'"
				 	
				"MATCH (n1)-[rel:ANNOTATED_BY]->(:Annotation)-[:OF_TYPE]->(n2:Type) 
				 	WHERE id(n1) in {from} AND id(n2) in {to}
				 	RETURN id(n1), id(n2), id(rel), 'ANNOTATED_BY'"
				 	
				"MATCH p=(n1)-[rel:ANNOTATED_BY]->(:Value:Annotation)-[r2:HAS]->(:Value)-[r3:IS]->(n2:Type) 
					WHERE id(n1) in {from} AND id(n2) in {to} 
					RETURN id(n1), id(n2), id(rel), 'HAS_ANNOTATION_VALUE'"  	 		
				}
			}
		}
	}
	
	//
	visualization {
		
		node hasLabel("Artifact") {
			textLabel propertyValue("fileName")
			baseImage "icons/jar_obj.png"
		}
		
		node hasLabel("Package") {
			textLabel propertyValue("fqn")
			baseImage "icons/package_obj.png"
		}
		
		node hasLabel("Method") {
			textLabel propertyValue("signature")
			baseImage "icons/methdef_obj.png"
		}
		
		node hasLabel("Field") {
			textLabel propertyValue("name")
			baseImage "icons/field_default_obj.png"			
		}		

		node hasLabel("Class") {
			textLabel propertyValue("name")
			baseImage "icons/class_obj.png"			
		}	
		
		node hasLabel("Annotation") {
			textLabel propertyValue("name")
			baseImage "icons/annotation_obj.png"			
		}
		
		node hasLabel("Enum") {
			textLabel propertyValue("name")
			baseImage "icons/enum_obj.png"			
		}
		
		node hasLabel("Interface") {
			textLabel propertyValue("name")
			baseImage "icons/int_obj.png"			
		}
		
		node hasLabel("Directory") {
			textLabel propertyValue("fileName")
			baseImage "icons/fldr_obj.png"		
		}
		
		node hasLabel("File") {
			textLabel propertyValue("fileName")
			baseImage "icons/file_obj.png"			
		}	
	}
}