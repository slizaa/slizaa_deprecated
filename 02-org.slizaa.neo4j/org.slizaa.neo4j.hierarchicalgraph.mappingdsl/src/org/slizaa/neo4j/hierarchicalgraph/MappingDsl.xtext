grammar org.slizaa.neo4j.hierarchicalgraph.MappingDsl with org.eclipse.xtext.common.Terminals

generate mappingDsl "http://www.slizaa.org/neo4j/hierarchicalgraph/MappingDsl"

MappingDefinition:
	'mapping' qualifiedName=QualifiedName '{'
	metaInformation=MetaInformation
	structureDefinition=StructureDefinition & visualisationDefinition=VisualizationDefinition
	'}';

MetaInformation:
	{MetaInformation} (('name' name=STRING)? &
	('description' description=STRING)?);

StructureDefinition:
	'structure' '{'
	topLevelNodes=TopLevelNodes & (hierarchyDefinitions=HierarchyDefinitions)? &
	(dependencyDefinitions=DependencyDefinitions)
	'}';

TopLevelNodes:
	'topLevelNodes' '{'
	queries+=CypherQuery (queries+=CypherQuery)*
	'}';

HierarchyDefinitions:
	'nodeHierarchy' '{'
	queries+=CypherQuery (queries+=CypherQuery)*
	'}';

DependencyDefinitions:
	'dependencies' '{'
	(simpleDependencies+=SimpleDependencies | aggregatedDependencies+=AggregatedDependencies)+
	'}';

AggregatedDependencies:
	'aggregatedDependencies' '{'
	(queries+=CypherQuery)+
	'onResolve' '{'
	(queries+=CypherQuery)+
	'}'
	'}';

SimpleDependencies:
	'simpleDependencies' '{'
	(queries+=CypherQuery)+
	'}';

VisualizationDefinition:
	'visualization' '{'
	(nodeVisualizationDefinition+=NodeVisualizationDefinition)+
	'}';

NodeVisualizationDefinition:
	'node' function=Function '{'
	labelProperties=LabelProperties
	switch=labelSwitch?
	'}';

labelSwitch:
	'on' function=Function '{'
	(labelCases+=LabelCase)+
	'}';

LabelCase:
	case=STRING ':' '{' labelProperties=LabelProperties '}';

LabelProperties:
	{LabelProperties} (('textLabel' textLabel=SimpleExpression)? & ('baseImage' baseImage=SimpleExpression)? &
	('overlayImageTopLeft' overlayImageTopLeft=SimpleExpression)? & ('overlayImageTopRight'
	overlayImageTopRight=SimpleExpression)? & ('overlayImageBottomLeft' overlayImageBottomLeft=SimpleExpression)? &
	('overlayImageBottomRight' overlayImageBottomRight=SimpleExpression)?);

SimpleExpression:
	{SimpleExpression} STRING | Function;

Function:
	name=ID '(' parameters+=SimpleExpression (',' parameters+=SimpleExpression)* ')';

QualifiedName:
	ID ('.' ID)*;

CypherQuery:
	STRING;

