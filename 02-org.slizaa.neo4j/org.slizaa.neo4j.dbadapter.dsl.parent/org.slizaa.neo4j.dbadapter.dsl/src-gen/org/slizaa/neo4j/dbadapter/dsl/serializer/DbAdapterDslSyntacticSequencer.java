/*
 * generated by Xtext 2.10.0
 */
package org.slizaa.neo4j.dbadapter.dsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.slizaa.neo4j.dbadapter.dsl.services.DbAdapterDslGrammarAccess;

@SuppressWarnings("all")
public class DbAdapterDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DbAdapterDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ManagedLocalDatabase___ManagedKeyword_0_0_LocalKeyword_0_1_DatabaseKeyword_0_2_LeftCurlyBracketKeyword_0_3__a;
	protected AbstractElementAlias match_ManagedLocalDatabase___ManagedKeyword_0_0_LocalKeyword_0_1_DatabaseKeyword_0_2_LeftCurlyBracketKeyword_0_3__p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DbAdapterDslGrammarAccess) access;
		match_ManagedLocalDatabase___ManagedKeyword_0_0_LocalKeyword_0_1_DatabaseKeyword_0_2_LeftCurlyBracketKeyword_0_3__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getManagedLocalDatabaseAccess().getManagedKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getManagedLocalDatabaseAccess().getLocalKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getManagedLocalDatabaseAccess().getDatabaseKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getManagedLocalDatabaseAccess().getLeftCurlyBracketKeyword_0_3()));
		match_ManagedLocalDatabase___ManagedKeyword_0_0_LocalKeyword_0_1_DatabaseKeyword_0_2_LeftCurlyBracketKeyword_0_3__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getManagedLocalDatabaseAccess().getManagedKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getManagedLocalDatabaseAccess().getLocalKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getManagedLocalDatabaseAccess().getDatabaseKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getManagedLocalDatabaseAccess().getLeftCurlyBracketKeyword_0_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ManagedLocalDatabase___ManagedKeyword_0_0_LocalKeyword_0_1_DatabaseKeyword_0_2_LeftCurlyBracketKeyword_0_3__a.equals(syntax))
				emit_ManagedLocalDatabase___ManagedKeyword_0_0_LocalKeyword_0_1_DatabaseKeyword_0_2_LeftCurlyBracketKeyword_0_3__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ManagedLocalDatabase___ManagedKeyword_0_0_LocalKeyword_0_1_DatabaseKeyword_0_2_LeftCurlyBracketKeyword_0_3__p.equals(syntax))
				emit_ManagedLocalDatabase___ManagedKeyword_0_0_LocalKeyword_0_1_DatabaseKeyword_0_2_LeftCurlyBracketKeyword_0_3__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('managed' 'local' 'database' '{')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'description' description=STRING
	 *     (rule start) (ambiguity) 'files' '{' files+=STRING
	 *     (rule start) (ambiguity) 'port' port=INT
	 *     (rule start) (ambiguity) 'storage' storage=STRING
	 *     (rule start) (ambiguity) (rule start)
	 *     description=STRING (ambiguity) 'description' description=STRING
	 *     description=STRING (ambiguity) 'files' '{' files+=STRING
	 *     description=STRING (ambiguity) 'port' port=INT
	 *     description=STRING (ambiguity) 'storage' storage=STRING
	 *     description=STRING (ambiguity) (rule end)
	 *     files+=STRING '}' '}' (ambiguity) 'description' description=STRING
	 *     files+=STRING '}' '}' (ambiguity) 'files' '{' files+=STRING
	 *     files+=STRING '}' '}' (ambiguity) 'port' port=INT
	 *     files+=STRING '}' '}' (ambiguity) 'storage' storage=STRING
	 *     files+=STRING '}' '}' (ambiguity) (rule end)
	 *     name=STRING (ambiguity) 'description' description=STRING
	 *     name=STRING (ambiguity) 'files' '{' files+=STRING
	 *     name=STRING (ambiguity) 'port' port=INT
	 *     name=STRING (ambiguity) 'storage' storage=STRING
	 *     name=STRING (ambiguity) (rule end)
	 *     port=INT (ambiguity) 'description' description=STRING
	 *     port=INT (ambiguity) 'files' '{' files+=STRING
	 *     port=INT (ambiguity) 'port' port=INT
	 *     port=INT (ambiguity) 'storage' storage=STRING
	 *     port=INT (ambiguity) (rule end)
	 *     storage=STRING (ambiguity) 'description' description=STRING
	 *     storage=STRING (ambiguity) 'files' '{' files+=STRING
	 *     storage=STRING (ambiguity) 'port' port=INT
	 *     storage=STRING (ambiguity) 'storage' storage=STRING
	 *     storage=STRING (ambiguity) (rule end)
	 */
	protected void emit_ManagedLocalDatabase___ManagedKeyword_0_0_LocalKeyword_0_1_DatabaseKeyword_0_2_LeftCurlyBracketKeyword_0_3__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('managed' 'local' 'database' '{')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'name' name=STRING
	 *     (rule start) (ambiguity) (rule start)
	 *     description=STRING (ambiguity) 'name' name=STRING
	 *     files+=STRING '}' '}' (ambiguity) 'name' name=STRING
	 *     name=STRING (ambiguity) 'name' name=STRING
	 *     port=INT (ambiguity) 'name' name=STRING
	 *     storage=STRING (ambiguity) 'name' name=STRING
	 */
	protected void emit_ManagedLocalDatabase___ManagedKeyword_0_0_LocalKeyword_0_1_DatabaseKeyword_0_2_LeftCurlyBracketKeyword_0_3__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
