/*
 * generated by Xtext 2.10.0
 */
package org.slizaa.neo4j.dbadapter.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DbAdapterDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DbAdapterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.slizaa.neo4j.dbadapter.dsl.DbAdapterDsl.DbAdapterDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cManagedLocalDatabaseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnmanagedRemoteDatabaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DbAdapterDefinition:
		//	ManagedLocalDatabase | UnmanagedRemoteDatabase;
		@Override public ParserRule getRule() { return rule; }
		
		//ManagedLocalDatabase | UnmanagedRemoteDatabase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ManagedLocalDatabase
		public RuleCall getManagedLocalDatabaseParserRuleCall_0() { return cManagedLocalDatabaseParserRuleCall_0; }
		
		//UnmanagedRemoteDatabase
		public RuleCall getUnmanagedRemoteDatabaseParserRuleCall_1() { return cUnmanagedRemoteDatabaseParserRuleCall_1; }
	}
	public class UnmanagedRemoteDatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.slizaa.neo4j.dbadapter.dsl.DbAdapterDsl.UnmanagedRemoteDatabase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnmanagedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRemoteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDatabaseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cUriKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cUriAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cUriSTRINGTerminalRuleCall_4_0_1_0 = (RuleCall)cUriAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cNameKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cNameAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_1_1_0 = (RuleCall)cNameAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cUnorderedGroup_4.eContents().get(2);
		private final Keyword cDescriptionKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_2_1_0 = (RuleCall)cDescriptionAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UnmanagedRemoteDatabase:
		//	'unmanaged' 'remote' 'database' '{' ('uri' uri=STRING & ('name' name=STRING)? & ('description' description=STRING)?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'unmanaged' 'remote' 'database' '{' ('uri' uri=STRING & ('name' name=STRING)? & ('description' description=STRING)?) '}'
		public Group getGroup() { return cGroup; }
		
		//'unmanaged'
		public Keyword getUnmanagedKeyword_0() { return cUnmanagedKeyword_0; }
		
		//'remote'
		public Keyword getRemoteKeyword_1() { return cRemoteKeyword_1; }
		
		//'database'
		public Keyword getDatabaseKeyword_2() { return cDatabaseKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('uri' uri=STRING & ('name' name=STRING)? & ('description' description=STRING)?)
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }
		
		//'uri' uri=STRING
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'uri'
		public Keyword getUriKeyword_4_0_0() { return cUriKeyword_4_0_0; }
		
		//uri=STRING
		public Assignment getUriAssignment_4_0_1() { return cUriAssignment_4_0_1; }
		
		//STRING
		public RuleCall getUriSTRINGTerminalRuleCall_4_0_1_0() { return cUriSTRINGTerminalRuleCall_4_0_1_0; }
		
		//('name' name=STRING)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'name'
		public Keyword getNameKeyword_4_1_0() { return cNameKeyword_4_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_4_1_1() { return cNameAssignment_4_1_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_1_1_0() { return cNameSTRINGTerminalRuleCall_4_1_1_0; }
		
		//('description' description=STRING)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'description'
		public Keyword getDescriptionKeyword_4_2_0() { return cDescriptionKeyword_4_2_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_4_2_1() { return cDescriptionAssignment_4_2_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_4_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ManagedLocalDatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.slizaa.neo4j.dbadapter.dsl.DbAdapterDsl.ManagedLocalDatabase");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cManagedKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLocalKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cDatabaseKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cNameKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cNameAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_4_1_0 = (RuleCall)cNameAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cDescriptionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cDescriptionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cPortKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPortINTTerminalRuleCall_2_1_0 = (RuleCall)cPortAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cStorageKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStorageAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStorageSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cStorageAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cFilesKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cFilesAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cFilesSTRINGTerminalRuleCall_4_0_2_0 = (RuleCall)cFilesAssignment_4_0_2.eContents().get(0);
		private final Group cGroup_4_0_3 = (Group)cGroup_4_0.eContents().get(3);
		private final Keyword cCommaKeyword_4_0_3_0 = (Keyword)cGroup_4_0_3.eContents().get(0);
		private final Assignment cFilesAssignment_4_0_3_1 = (Assignment)cGroup_4_0_3.eContents().get(1);
		private final RuleCall cFilesSTRINGTerminalRuleCall_4_0_3_1_0 = (RuleCall)cFilesAssignment_4_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_4 = (Keyword)cGroup_4_0.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//ManagedLocalDatabase:
		//	'managed' 'local' 'database' '{' ('name' name=STRING)? & ('description' description=STRING)? & ('port' port=INT)? &
		//	'storage' storage=STRING & ('files' '{' files+=STRING (',' files+=STRING)* '}')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'managed' 'local' 'database' '{' ('name' name=STRING)? & ('description' description=STRING)? & ('port' port=INT)? &
		//'storage' storage=STRING & ('files' '{' files+=STRING (',' files+=STRING)* '}') '}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'managed' 'local' 'database' '{' ('name' name=STRING)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'managed'
		public Keyword getManagedKeyword_0_0() { return cManagedKeyword_0_0; }
		
		//'local'
		public Keyword getLocalKeyword_0_1() { return cLocalKeyword_0_1; }
		
		//'database'
		public Keyword getDatabaseKeyword_0_2() { return cDatabaseKeyword_0_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_3() { return cLeftCurlyBracketKeyword_0_3; }
		
		//('name' name=STRING)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'name'
		public Keyword getNameKeyword_0_4_0() { return cNameKeyword_0_4_0; }
		
		//name=STRING
		public Assignment getNameAssignment_0_4_1() { return cNameAssignment_0_4_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_4_1_0() { return cNameSTRINGTerminalRuleCall_0_4_1_0; }
		
		//('description' description=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'description'
		public Keyword getDescriptionKeyword_1_0() { return cDescriptionKeyword_1_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_1_1() { return cDescriptionAssignment_1_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_1_0; }
		
		//('port' port=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'port'
		public Keyword getPortKeyword_2_0() { return cPortKeyword_2_0; }
		
		//port=INT
		public Assignment getPortAssignment_2_1() { return cPortAssignment_2_1; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_2_1_0() { return cPortINTTerminalRuleCall_2_1_0; }
		
		//'storage' storage=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//'storage'
		public Keyword getStorageKeyword_3_0() { return cStorageKeyword_3_0; }
		
		//storage=STRING
		public Assignment getStorageAssignment_3_1() { return cStorageAssignment_3_1; }
		
		//STRING
		public RuleCall getStorageSTRINGTerminalRuleCall_3_1_0() { return cStorageSTRINGTerminalRuleCall_3_1_0; }
		
		//('files' '{' files+=STRING (',' files+=STRING)* '}') '}'
		public Group getGroup_4() { return cGroup_4; }
		
		//('files' '{' files+=STRING (',' files+=STRING)* '}')
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'files'
		public Keyword getFilesKeyword_4_0_0() { return cFilesKeyword_4_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0_1() { return cLeftCurlyBracketKeyword_4_0_1; }
		
		//files+=STRING
		public Assignment getFilesAssignment_4_0_2() { return cFilesAssignment_4_0_2; }
		
		//STRING
		public RuleCall getFilesSTRINGTerminalRuleCall_4_0_2_0() { return cFilesSTRINGTerminalRuleCall_4_0_2_0; }
		
		//(',' files+=STRING)*
		public Group getGroup_4_0_3() { return cGroup_4_0_3; }
		
		//','
		public Keyword getCommaKeyword_4_0_3_0() { return cCommaKeyword_4_0_3_0; }
		
		//files+=STRING
		public Assignment getFilesAssignment_4_0_3_1() { return cFilesAssignment_4_0_3_1; }
		
		//STRING
		public RuleCall getFilesSTRINGTerminalRuleCall_4_0_3_1_0() { return cFilesSTRINGTerminalRuleCall_4_0_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_0_4() { return cRightCurlyBracketKeyword_4_0_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1() { return cRightCurlyBracketKeyword_4_1; }
	}
	
	
	private final DbAdapterDefinitionElements pDbAdapterDefinition;
	private final UnmanagedRemoteDatabaseElements pUnmanagedRemoteDatabase;
	private final ManagedLocalDatabaseElements pManagedLocalDatabase;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DbAdapterDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDbAdapterDefinition = new DbAdapterDefinitionElements();
		this.pUnmanagedRemoteDatabase = new UnmanagedRemoteDatabaseElements();
		this.pManagedLocalDatabase = new ManagedLocalDatabaseElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.slizaa.neo4j.dbadapter.dsl.DbAdapterDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DbAdapterDefinition:
	//	ManagedLocalDatabase | UnmanagedRemoteDatabase;
	public DbAdapterDefinitionElements getDbAdapterDefinitionAccess() {
		return pDbAdapterDefinition;
	}
	
	public ParserRule getDbAdapterDefinitionRule() {
		return getDbAdapterDefinitionAccess().getRule();
	}
	
	//UnmanagedRemoteDatabase:
	//	'unmanaged' 'remote' 'database' '{' ('uri' uri=STRING & ('name' name=STRING)? & ('description' description=STRING)?)
	//	'}';
	public UnmanagedRemoteDatabaseElements getUnmanagedRemoteDatabaseAccess() {
		return pUnmanagedRemoteDatabase;
	}
	
	public ParserRule getUnmanagedRemoteDatabaseRule() {
		return getUnmanagedRemoteDatabaseAccess().getRule();
	}
	
	//ManagedLocalDatabase:
	//	'managed' 'local' 'database' '{' ('name' name=STRING)? & ('description' description=STRING)? & ('port' port=INT)? &
	//	'storage' storage=STRING & ('files' '{' files+=STRING (',' files+=STRING)* '}')
	//	'}';
	public ManagedLocalDatabaseElements getManagedLocalDatabaseAccess() {
		return pManagedLocalDatabase;
	}
	
	public ParserRule getManagedLocalDatabaseRule() {
		return getManagedLocalDatabaseAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
