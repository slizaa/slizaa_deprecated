/*
 * generated by Xtext 2.10.0
 */
package org.slizaa.neo4j.dbadapter.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.slizaa.neo4j.dbadapter.dsl.dbAdapterDsl.DbAdapterDslPackage;
import org.slizaa.neo4j.dbadapter.dsl.dbAdapterDsl.ManagedLocalDatabase;
import org.slizaa.neo4j.dbadapter.dsl.dbAdapterDsl.UnmanagedRemoteDatabase;
import org.slizaa.neo4j.dbadapter.dsl.services.DbAdapterDslGrammarAccess;

@SuppressWarnings("all")
public class DbAdapterDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DbAdapterDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DbAdapterDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DbAdapterDslPackage.MANAGED_LOCAL_DATABASE:
				sequence_ManagedLocalDatabase(context, (ManagedLocalDatabase) semanticObject); 
				return; 
			case DbAdapterDslPackage.UNMANAGED_REMOTE_DATABASE:
				sequence_UnmanagedRemoteDatabase(context, (UnmanagedRemoteDatabase) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DbAdapterDefinition returns ManagedLocalDatabase
	 *     ManagedLocalDatabase returns ManagedLocalDatabase
	 *
	 * Constraint:
	 *     ((name=STRING | description=STRING | port=INT | storage=STRING)? (files+=STRING files+=STRING*)?)+
	 */
	protected void sequence_ManagedLocalDatabase(ISerializationContext context, ManagedLocalDatabase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DbAdapterDefinition returns UnmanagedRemoteDatabase
	 *     UnmanagedRemoteDatabase returns UnmanagedRemoteDatabase
	 *
	 * Constraint:
	 *     (uri=STRING | name=STRING | description=STRING)+
	 */
	protected void sequence_UnmanagedRemoteDatabase(ISerializationContext context, UnmanagedRemoteDatabase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
